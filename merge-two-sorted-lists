https://leetcode.com/problems/merge-two-sorted-lists/
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

Solution in Python :

Solution 1:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        
        head,tail = None,None
        
        if list1==None:
            return list2
        
        if list2==None:
            return list1
        
        if list1.val <= list2.val:
            head = list1
            list1 = list1.next
        else:
            head = list2
            list2 = list2.next 
        tail= head
        while list1!=None or list2!=None:
            if list1!=None and list2!=None:
                if list1.val <= list2.val:
                    tail.next = list1
                    tail = tail.next
                    list1 = list1.next
                else:
                    tail.next = list2
                    tail = tail.next
                    list2 = list2.next
            if list1==None:
                tail.next = list2
                return head
            if list2==None:
                tail.next =list1
                return head
        return head
        
        
        Solution 2 :
        Recursive approach
        # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        
        #if list1 is empty then return list2 (list2 could ne None also)
        if list1==None:
            return list2
        
        #if list2 is empty then return list1 (list1 could ne None also)
        if list2==None:
            return list1
        if list1.val<=list2.val:
            
            list1.next = self.mergeTwoLists(list1.next,list2)
            return list1
        list2.next = self.mergeTwoLists(list1,list2.next)
        return list2
                    
                    
   
                    
                    
                
            
